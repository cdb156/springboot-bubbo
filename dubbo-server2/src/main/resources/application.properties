server.port=8911
## Dubbo 服务提供者配置
#--服务名称
spring.dubbo.application.name=provider2
#-- 注册中心地址
spring.dubbo.registry.address=zookeeper://127.0.0.1:2181
#-- dubbo 协议
spring.dubbo.protocol.name=dubbo
spring.dubbo.protocol.port=20881
#--声明需要暴露的服务接口(实现类, 会自动寻找上层接口)
spring.dubbo.scan=club.springboot.dubbo.dubboserver2.service

spring.datasource.name=local
spring.datasource.url=jdbc:mysql://localhost:3306/myblog
spring.datasource.username=root
spring.datasource.password=123654
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
#druid 数据源配置
spring.datasource.druid.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.druid.filters=stat
spring.datasource.druid.max-active=20
spring.datasource.druid.initial-size=1
spring.datasource.druid.time-between-eviction-runs-millis=60000
spring.datasource.druid.min-evictable-idle-time-millis=300000
spring.datasource.druid.test-while-idle=true
spring.datasource.druid.validation-query=select 'x'
spring.datasource.druid.test-on-borrow=false
spring.datasource.druid.test-on-return=false
spring.datasource.druid.pool-prepared-statements=true
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20

# mybaits 配置
#实体类路径
mybatis.type-aliases-package=club.springboot.dubbo.po
#mapper文件映射位置(映射文件 和 @mapper 注解只能存在一个)
#mybatis.mapper-locations=classpath:mapping/*.xml
## 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存 默认为true
mybatis.configuration.cache-enabled=true
## 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。默认是false
mybatis.configuration.lazy-loading-enabled=true
## 是否允许单一语句返回多结果集（需要兼容驱动）默认为true
mybatis.configuration.multiple-result-sets-enabled=true
## 使用列标签代替列名。不同的驱动在这方面会有不同的表现 默认为 true
mybatis.configuration.use-column-label=true
## 允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键. 默认为 false
mybatis.configuration.use-generated-keys=false
## 指定 MyBatis 应如何自动映射列到字段或属性。
## NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。
## 默认为 PARTIAL
mybatis.configuration.auto-mapping-behavior=partial
## 指定发现自动映射目标未知列（或者未知属性类型）的行为。
## NONE=不做任何反应
## WARNING=输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN)
## FAILING=映射失败 (抛出 SqlSessionException)
## 默认为 NONE
mybatis.configuration.auto-mapping-unknown-column-behavior=warning
## 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新
## 默认为 SIMPLE
mybatis.configuration.default-executor-type=simple
## 设置超时时间，它决定驱动等待数据库响应的秒数
mybatis.configuration.default-statement-timeout=25
## 为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。
mybatis.configuration.default-fetch-size=100
## 允许再嵌套语句中使用分页, 如果允许使用false
mybatis.configuration.safe-row-bounds-enabled=false
## 是否开启驼峰命名规则, 即从 a_cloumn => aCloumn 默认为false
mybatis.configuration.map-underscore-to-camel-case=true
## MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。
## 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。
## 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。
mybatis.configuration.local-cache-scope=session
## 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。
## 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。
mybatis.configuration.jdbc-type-for-null=other
## 指定哪个对象的方法触发一次延迟加载
mybatis.configuration.lazy-load-trigger-methods=equals,clone,hashcode,toString
## 指定动态 SQL 生成的默认语言
#    mybatis.configuration.default-scripting-language=org.apache.ibatis.scripting.xmltags.XMLLanguageDriver
## 指定 Enum 使用的默认 TypeHandler 。 (从3.4.5开始)
#    mybatis.configuration.default-enum-type-handler=org.apache.ibatis.type.ArrayTypeHandler
## 指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，
## 这对于有 Map.keySet() 依赖或 null 值初始化的时候是有用的。注意基本类型（int、boolean等）是不能设置成 null 的
## 默认为 false
#    mybatis.configuration.call-setters-on-nulls=false
## 当返回行所有的列都是空的时候, MyBatis 默认返回null, 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集 (i.e. collectioin and association)。（从3.4.2开始）
## 默认是false
#    mybatis.configuration.return-instance-for-empty-row=false
##logPrefix 制定 MyBatis 添加到日志里的前缀
mybatis.configuration.log-prefix=MyBatis-log  %yy-%MM-%dd %hh:%mm:%ss
## 指定 MyBatis 所用日志的具体实现，未指定时将自动查找 SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
##创建具有延迟加载能力的对象用的代理工具 CGLIB | JAVASSIST
## 默认 JAVASSIST
#    mybatis.configuration.proxy-factory:
##允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的工程必须采用Java 8编译，并且加上-parameters选项。（从3.4.1开始）
#    mybatis.configuration.use-actual-param-name=true
## 指定一个提供Configuration实例的类。 这个被返回的Configuration实例用来加载被反序列化对象的懒加载属性值。
## 这个类必须包含一个签名方法static Configuration getConfiguration(). (从 3.2.3 版本开始)
#    mybatis.configuration.configuration-factory:

#active mq 配置
spring.activemq.broker-url=tcp://localhost:61616
spring.activemq.in-memory=true
spring.activemq.pool.enabled=false

